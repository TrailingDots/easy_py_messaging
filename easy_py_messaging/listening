#!/bin/bash
#
# Map a port to a process listening to the port.
#
# If nobody listening, return code is 0
#
# If somebody is listening, return code is 
# the number of ports listening to a port.
#
# A return code of 127 provides an error code
# because this script must have a port to interrogate!
#
# Output when listening:
# <port#> <pid> <program_listening> [<params to prog>]
#
# To check for mulitple ports:
#   listening port1 port2 [...portN]
# Ports without a listener do not appear on output.
#
# To check a range of ports:
#    listening $(seq <start_port> <end_port>)
#

function listeningToPort() {
    PID=$(lsof -i TCP:$1 | grep LISTEN | awk '{print $2}')

    # If no port used, return 1
    if [ x"$PID" = x"" ]
    then
        return 0    # Zero listeners
    fi

    # Report on program listening
    echo -n $1  " "  # Display the port
    /bin/ps x | grep $PID | \
        grep -v grep | \
        awk '{print $1; for (i=5; i<= NF; i++) print $i}' | \
        tr '\n' ' ' 
    echo ''
    # Success - port used by a program. One listener
    return 1
}

# At least one port must be supplied.
if [ x$1 == x ]
then
    echo "Usage: $0 <port#> [<port2> <port3> ...]"
    echo "No ports suppied, cannot continue"
    echo "For a range of ports:   $0  `seq 5570 5590`"
    echo "to get the range of 4470 through and including 5590"
    exit 127  # User must accept this as an error
fi

# Upon completint the for loop, $return_code has the
# total count of listeners for all requested ports.
let return_code=0
for port in $*
do
    listeningToPort $port
    let return_code=$return_code+$?
done

# The return code indicates the count of listeners for all the ports.
echo $return_code   # count of listeners to stdout
exit $return_code   # count as return code.
